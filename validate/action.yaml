name: Validate a pull request
description: Validate a pull request
inputs:
  github_token:
    description: |
      GitHub Access token to get a pull request.
      `pull_requests:read` and `contents:read` permissions are required.
    required: true
  pull_request_number:
    description: |
      A pull request number.
    required: true

  repository_owner:
    description: |
      A GitHub repository owner.
    required: false
    default: ${{ github.repository_owner }}
  repository_name:
    description: |
      A GitHub repository name.
    required: false
    default: ${{ github.event.repository.name }}
  allowed_committers:
    description: |
      A list of allowed committers.
    required: false
    default: |
      renovate[bot]
      dependabot[bot]
outputs:
  approved:
    description: |
      Whether the pull request is valid or not.
    value: ${{ steps.validate.outputs.approved }}
  approved_sha:
    description: |
      The last commit SHA of the pull request.
    value: ${{ steps.validate.outputs.last_sha }}
runs:
  using: composite
  steps:
    # List commits and their authors
    - id: pr
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        REPO_OWNER: ${{ inputs.repository_owner }}
        REPO_NAME: ${{ inputs.repository_name }}
        NUMBER: ${{ inputs.pull_request_number }}
      run: |
        resp=$(gh api graphql \
          --paginate --slurp \
          -F "owner=$REPO_OWNER" \
          -F "repo=$REPO_NAME" \
          -F "pr=$NUMBER" -f query='
          query($owner: String!, $repo: String!, $pr: Int!, $endCursor: String) {
            repository(owner: $owner, name: $repo) {
              pullRequest(number: $pr) {
                commits(first: 100, after: $endCursor) {
                  totalCount
                  pageInfo {
                    hasNextPage
                    endCursor
                  }
                  nodes {
                    commit {
                      oid
                      committer {
                        user {
                          login
                        }
                      }
                      author {
                        user {
                          login
                        }
                      }
                      signature {
                        isValid
                      }
                    }
                  }
                }
              }
            }
          }
        ')
        {
          echo 'value<<EOF'
          echo "$resp"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    # validate
    - uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
      id: validate
      env:
        ALLOWED_COMMITTERS: ${{ inputs.allowed_committers }}
        PR: ${{ steps.pr.outputs.value }}
      with:
        script: |
          const payloads = JSON.parse(process.env.PR);
          const allowedCommitters = new Set(process.env.ALLOWED_COMMITTERS.trim().split('\n'));

          // .[].data.repository.pullRequest.commits.nodes[].commit
          // oid, committer.user.login, signagture.isValid
          let lastSHA = "";
          let approved = true;
          for (const payload of payloads) {
            for (const node of payload.data.repository.pullRequest.commits.nodes) {
              const commit = node.commit;
              const oid = commit.oid;
              lastSHA = oid;
              if (!commit.signature || !commit.signature.isValid) {
                core.warning(`skip approval as commit signature is invalid: ${oid}`);
                approved = false;
                continue;
              }
              const committer = commit.committer.user;
              const author = commit.author.user;
              if (committer) {
                if (!allowedCommitters.has(committer.login)) {
                  core.warning(`skip approval as the committer isn't allowed: committer=${committer.login} sha=${oid}`);
                  approved = false;
                }
                continue;
              }
              if (!author) {
                core.warning(`skip approval as both committer and author are null: ${oid}`);
                approved = false;
                continue;
              }
              if (!allowedCommitters.has(author.login)) {
                core.warning(`skip approval as the commit author isn't allowed: author=${author.login} sha=${oid}`);
                approved = false;
              }
            }
          }
          core.setOutput('approved', approved);
          core.setOutput('last_sha', lastSHA);
